/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace LibTier {
  export type TierStruct = {
    startTime: PromiseOrValue<BigNumberish>;
    endTime: PromiseOrValue<BigNumberish>;
  };

  export type TierStructOutput = [BigNumber, BigNumber] & {
    startTime: BigNumber;
    endTime: BigNumber;
  };
}

export declare namespace LibPresale {
  export type PresaleStruct = {
    governance: PromiseOrValue<string>;
    salt: PromiseOrValue<BigNumberish>;
    emergencyWithdrawFees: PromiseOrValue<BigNumberish>;
    nftAddress: PromiseOrValue<string>;
    payment_currency: PromiseOrValue<string>;
    rate: PromiseOrValue<BigNumberish>;
    min_payment: PromiseOrValue<BigNumberish>;
    max_payment: PromiseOrValue<BigNumberish>;
    softCap: PromiseOrValue<BigNumberish>;
    hardCap: PromiseOrValue<BigNumberish>;
    startTime: PromiseOrValue<BigNumberish>;
    endTime: PromiseOrValue<BigNumberish>;
    tgeBps: PromiseOrValue<BigNumberish>;
    cycle: PromiseOrValue<BigNumberish>;
    cycleBps: PromiseOrValue<BigNumberish>;
    useWhitelist: PromiseOrValue<boolean>;
    publicStartTime: PromiseOrValue<BigNumberish>;
    tier1: LibTier.TierStruct;
  };

  export type PresaleStructOutput = [
    string,
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    LibTier.TierStructOutput
  ] & {
    governance: string;
    salt: BigNumber;
    emergencyWithdrawFees: BigNumber;
    nftAddress: string;
    payment_currency: string;
    rate: BigNumber;
    min_payment: BigNumber;
    max_payment: BigNumber;
    softCap: BigNumber;
    hardCap: BigNumber;
    startTime: BigNumber;
    endTime: BigNumber;
    tgeBps: BigNumber;
    cycle: BigNumber;
    cycleBps: BigNumber;
    useWhitelist: boolean;
    publicStartTime: BigNumber;
    tier1: LibTier.TierStructOutput;
  };
}

export interface PoolInterface extends utils.Interface {
  functions: {
    "MINIMUM_LOCK_DAYS()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "cancel()": FunctionFragment;
    "changeTierDates(uint256,uint256)": FunctionFragment;
    "changeWhitelist(bool)": FunctionFragment;
    "claim()": FunctionFragment;
    "claimedOf(address)": FunctionFragment;
    "contribute(uint256)": FunctionFragment;
    "contributionOf(address)": FunctionFragment;
    "cycle()": FunctionFragment;
    "cycleBps()": FunctionFragment;
    "emergencyWithdrawContribution()": FunctionFragment;
    "emergencyWithdrawFees()": FunctionFragment;
    "emergencyWithdrawToken(address,address,uint256)": FunctionFragment;
    "endTime()": FunctionFragment;
    "finalize(address,uint256)": FunctionFragment;
    "getPaymentTokenDecimals()": FunctionFragment;
    "getPoolInfo()": FunctionFragment;
    "governance()": FunctionFragment;
    "hardCap()": FunctionFragment;
    "initialize((address,uint256,uint256,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,uint256,(uint256,uint256)),address[2],uint8)": FunctionFragment;
    "max_payment()": FunctionFragment;
    "min_payment()": FunctionFragment;
    "nftAddress()": FunctionFragment;
    "owner()": FunctionFragment;
    "payment_currency()": FunctionFragment;
    "poolState()": FunctionFragment;
    "poolType()": FunctionFragment;
    "publicStartTime()": FunctionFragment;
    "purchasedOf(address)": FunctionFragment;
    "rate()": FunctionFragment;
    "refundedOf(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setGovernance(address)": FunctionFragment;
    "setRate(uint256)": FunctionFragment;
    "softCap()": FunctionFragment;
    "startPublicSaleNow()": FunctionFragment;
    "startTime()": FunctionFragment;
    "tgeBps()": FunctionFragment;
    "tgeDate()": FunctionFragment;
    "tier1()": FunctionFragment;
    "token()": FunctionFragment;
    "totalClaimed()": FunctionFragment;
    "totalRaised()": FunctionFragment;
    "totalRefunded()": FunctionFragment;
    "totalVolumePurchased()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "tvl()": FunctionFragment;
    "useWhitelisting()": FunctionFragment;
    "userAvailableClaim(address)": FunctionFragment;
    "withdrawContribution()": FunctionFragment;
    "withdrawLeftovers()": FunctionFragment;
    "withdrawLiquidity()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MINIMUM_LOCK_DAYS"
      | "VERSION"
      | "cancel"
      | "changeTierDates"
      | "changeWhitelist"
      | "claim"
      | "claimedOf"
      | "contribute"
      | "contributionOf"
      | "cycle"
      | "cycleBps"
      | "emergencyWithdrawContribution"
      | "emergencyWithdrawFees"
      | "emergencyWithdrawToken"
      | "endTime"
      | "finalize"
      | "getPaymentTokenDecimals"
      | "getPoolInfo"
      | "governance"
      | "hardCap"
      | "initialize"
      | "max_payment"
      | "min_payment"
      | "nftAddress"
      | "owner"
      | "payment_currency"
      | "poolState"
      | "poolType"
      | "publicStartTime"
      | "purchasedOf"
      | "rate"
      | "refundedOf"
      | "renounceOwnership"
      | "setGovernance"
      | "setRate"
      | "softCap"
      | "startPublicSaleNow"
      | "startTime"
      | "tgeBps"
      | "tgeDate"
      | "tier1"
      | "token"
      | "totalClaimed"
      | "totalRaised"
      | "totalRefunded"
      | "totalVolumePurchased"
      | "transferOwnership"
      | "tvl"
      | "useWhitelisting"
      | "userAvailableClaim"
      | "withdrawContribution"
      | "withdrawLeftovers"
      | "withdrawLiquidity"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MINIMUM_LOCK_DAYS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(functionFragment: "cancel", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeTierDates",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeWhitelist",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimedOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "contribute",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "contributionOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "cycle", values?: undefined): string;
  encodeFunctionData(functionFragment: "cycleBps", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawContribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "endTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "finalize",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaymentTokenDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "hardCap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      LibPresale.PresaleStruct,
      [PromiseOrValue<string>, PromiseOrValue<string>],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "max_payment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "min_payment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nftAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payment_currency",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "poolState", values?: undefined): string;
  encodeFunctionData(functionFragment: "poolType", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "publicStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "purchasedOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "rate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "refundedOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "softCap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "startPublicSaleNow",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "tgeBps", values?: undefined): string;
  encodeFunctionData(functionFragment: "tgeDate", values?: undefined): string;
  encodeFunctionData(functionFragment: "tier1", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalClaimed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRaised",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRefunded",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalVolumePurchased",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "tvl", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "useWhitelisting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userAvailableClaim",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawContribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLeftovers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLiquidity",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "MINIMUM_LOCK_DAYS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeTierDates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimedOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "contribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contributionOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cycle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cycleBps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentTokenDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hardCap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "max_payment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "min_payment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nftAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payment_currency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolState", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publicStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchasedOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refundedOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "softCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startPublicSaleNow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tgeBps", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tgeDate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tier1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRaised",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRefunded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVolumePurchased",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tvl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "useWhitelisting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userAvailableClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLeftovers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLiquidity",
    data: BytesLike
  ): Result;

  events: {
    "Cancelled(address,uint256)": EventFragment;
    "Claimed(address,uint256,uint256,address)": EventFragment;
    "Contributed(address,uint256,address,uint256)": EventFragment;
    "ContributionWithdrawn(address,uint256,uint256,address)": EventFragment;
    "EmergencyLiquidityWithdrawn(address,address,uint256,address)": EventFragment;
    "EmergencyWithdrawn(address,address,uint256,address)": EventFragment;
    "Finalized(address,address,address,uint256,uint256)": EventFragment;
    "GovernanceChanged(address,address,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "LiquidityWithdrawn(address,address,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PoolPublicStartAtChanged(uint256,uint256)": EventFragment;
    "PoolTierChanged(uint256,uint256,uint256)": EventFragment;
    "RateChanged(address,uint256,uint256)": EventFragment;
    "WhitelistChanged(bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Cancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Contributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContributionWithdrawn"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "EmergencyLiquidityWithdrawn"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Finalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernanceChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolPublicStartAtChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolTierChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistChanged"): EventFragment;
}

export interface CancelledEventObject {
  pool_address: string;
  timestamp: BigNumber;
}
export type CancelledEvent = TypedEvent<
  [string, BigNumber],
  CancelledEventObject
>;

export type CancelledEventFilter = TypedEventFilter<CancelledEvent>;

export interface ClaimedEventObject {
  pool_address: string;
  total_claimed: BigNumber;
  pending_claim: BigNumber;
  user_address: string;
}
export type ClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  ClaimedEventObject
>;

export type ClaimedEventFilter = TypedEventFilter<ClaimedEvent>;

export interface ContributedEventObject {
  pool_address: string;
  value: BigNumber;
  user: string;
  totalRaised: BigNumber;
}
export type ContributedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  ContributedEventObject
>;

export type ContributedEventFilter = TypedEventFilter<ContributedEvent>;

export interface ContributionWithdrawnEventObject {
  pool_address: string;
  amount: BigNumber;
  fees: BigNumber;
  user: string;
}
export type ContributionWithdrawnEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  ContributionWithdrawnEventObject
>;

export type ContributionWithdrawnEventFilter =
  TypedEventFilter<ContributionWithdrawnEvent>;

export interface EmergencyLiquidityWithdrawnEventObject {
  pool_address: string;
  user: string;
  amount: BigNumber;
  pair: string;
}
export type EmergencyLiquidityWithdrawnEvent = TypedEvent<
  [string, string, BigNumber, string],
  EmergencyLiquidityWithdrawnEventObject
>;

export type EmergencyLiquidityWithdrawnEventFilter =
  TypedEventFilter<EmergencyLiquidityWithdrawnEvent>;

export interface EmergencyWithdrawnEventObject {
  pool_address: string;
  user: string;
  amount: BigNumber;
  pair: string;
}
export type EmergencyWithdrawnEvent = TypedEvent<
  [string, string, BigNumber, string],
  EmergencyWithdrawnEventObject
>;

export type EmergencyWithdrawnEventFilter =
  TypedEventFilter<EmergencyWithdrawnEvent>;

export interface FinalizedEventObject {
  pool_address: string;
  user: string;
  token: string;
  token_supply: BigNumber;
  total_raised: BigNumber;
}
export type FinalizedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  FinalizedEventObject
>;

export type FinalizedEventFilter = TypedEventFilter<FinalizedEvent>;

export interface GovernanceChangedEventObject {
  pool_address: string;
  _old: string;
  _new: string;
}
export type GovernanceChangedEvent = TypedEvent<
  [string, string, string],
  GovernanceChangedEventObject
>;

export type GovernanceChangedEventFilter =
  TypedEventFilter<GovernanceChangedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LiquidityWithdrawnEventObject {
  pool_address: string;
  user: string;
  amount: BigNumber;
  payment_currency: string;
}
export type LiquidityWithdrawnEvent = TypedEvent<
  [string, string, BigNumber, string],
  LiquidityWithdrawnEventObject
>;

export type LiquidityWithdrawnEventFilter =
  TypedEventFilter<LiquidityWithdrawnEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PoolPublicStartAtChangedEventObject {
  timestamp: BigNumber;
  start_at: BigNumber;
}
export type PoolPublicStartAtChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  PoolPublicStartAtChangedEventObject
>;

export type PoolPublicStartAtChangedEventFilter =
  TypedEventFilter<PoolPublicStartAtChangedEvent>;

export interface PoolTierChangedEventObject {
  timestamp: BigNumber;
  _endTime1: BigNumber;
  _publicStartTime: BigNumber;
}
export type PoolTierChangedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  PoolTierChangedEventObject
>;

export type PoolTierChangedEventFilter = TypedEventFilter<PoolTierChangedEvent>;

export interface RateChangedEventObject {
  pool_address: string;
  _old_rate: BigNumber;
  _new_rate: BigNumber;
}
export type RateChangedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  RateChangedEventObject
>;

export type RateChangedEventFilter = TypedEventFilter<RateChangedEvent>;

export interface WhitelistChangedEventObject {
  _whitelist: boolean;
}
export type WhitelistChangedEvent = TypedEvent<
  [boolean],
  WhitelistChangedEventObject
>;

export type WhitelistChangedEventFilter =
  TypedEventFilter<WhitelistChangedEvent>;

export interface Pool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MINIMUM_LOCK_DAYS(overrides?: CallOverrides): Promise<[BigNumber]>;

    VERSION(overrides?: CallOverrides): Promise<[number]>;

    cancel(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeTierDates(
      _endTime1: PromiseOrValue<BigNumberish>,
      _publicStartTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeWhitelist(
      _whitelist: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    contribute(
      _funds: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    contributionOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cycle(overrides?: CallOverrides): Promise<[BigNumber]>;

    cycleBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    emergencyWithdrawContribution(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdrawFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    emergencyWithdrawToken(
      payaddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    endTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    finalize(
      _token: PromiseOrValue<string>,
      _totalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPaymentTokenDecimals(overrides?: CallOverrides): Promise<[number]>;

    getPoolInfo(
      overrides?: CallOverrides
    ): Promise<[string, number[], BigNumber[], string, string]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    hardCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      presale: LibPresale.PresaleStruct,
      _linkAddress: [PromiseOrValue<string>, PromiseOrValue<string>],
      _version: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    max_payment(overrides?: CallOverrides): Promise<[BigNumber]>;

    min_payment(overrides?: CallOverrides): Promise<[BigNumber]>;

    nftAddress(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    payment_currency(overrides?: CallOverrides): Promise<[string]>;

    poolState(overrides?: CallOverrides): Promise<[number]>;

    poolType(overrides?: CallOverrides): Promise<[number]>;

    publicStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    purchasedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rate(overrides?: CallOverrides): Promise<[BigNumber]>;

    refundedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGovernance(
      governance_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRate(
      _rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    softCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    startPublicSaleNow(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    tgeBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    tgeDate(overrides?: CallOverrides): Promise<[BigNumber]>;

    tier1(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { startTime: BigNumber; endTime: BigNumber }
    >;

    token(overrides?: CallOverrides): Promise<[string]>;

    totalClaimed(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalRaised(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalRefunded(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalVolumePurchased(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tvl(overrides?: CallOverrides): Promise<[BigNumber]>;

    useWhitelisting(overrides?: CallOverrides): Promise<[boolean]>;

    userAvailableClaim(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawContribution(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawLeftovers(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawLiquidity(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  MINIMUM_LOCK_DAYS(overrides?: CallOverrides): Promise<BigNumber>;

  VERSION(overrides?: CallOverrides): Promise<number>;

  cancel(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeTierDates(
    _endTime1: PromiseOrValue<BigNumberish>,
    _publicStartTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeWhitelist(
    _whitelist: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claim(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimedOf(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  contribute(
    _funds: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  contributionOf(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cycle(overrides?: CallOverrides): Promise<BigNumber>;

  cycleBps(overrides?: CallOverrides): Promise<BigNumber>;

  emergencyWithdrawContribution(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdrawFees(overrides?: CallOverrides): Promise<BigNumber>;

  emergencyWithdrawToken(
    payaddress: PromiseOrValue<string>,
    tokenAddress: PromiseOrValue<string>,
    tokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  endTime(overrides?: CallOverrides): Promise<BigNumber>;

  finalize(
    _token: PromiseOrValue<string>,
    _totalSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPaymentTokenDecimals(overrides?: CallOverrides): Promise<number>;

  getPoolInfo(
    overrides?: CallOverrides
  ): Promise<[string, number[], BigNumber[], string, string]>;

  governance(overrides?: CallOverrides): Promise<string>;

  hardCap(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    presale: LibPresale.PresaleStruct,
    _linkAddress: [PromiseOrValue<string>, PromiseOrValue<string>],
    _version: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  max_payment(overrides?: CallOverrides): Promise<BigNumber>;

  min_payment(overrides?: CallOverrides): Promise<BigNumber>;

  nftAddress(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  payment_currency(overrides?: CallOverrides): Promise<string>;

  poolState(overrides?: CallOverrides): Promise<number>;

  poolType(overrides?: CallOverrides): Promise<number>;

  publicStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  purchasedOf(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rate(overrides?: CallOverrides): Promise<BigNumber>;

  refundedOf(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGovernance(
    governance_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRate(
    _rate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  softCap(overrides?: CallOverrides): Promise<BigNumber>;

  startPublicSaleNow(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startTime(overrides?: CallOverrides): Promise<BigNumber>;

  tgeBps(overrides?: CallOverrides): Promise<BigNumber>;

  tgeDate(overrides?: CallOverrides): Promise<BigNumber>;

  tier1(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { startTime: BigNumber; endTime: BigNumber }
  >;

  token(overrides?: CallOverrides): Promise<string>;

  totalClaimed(overrides?: CallOverrides): Promise<BigNumber>;

  totalRaised(overrides?: CallOverrides): Promise<BigNumber>;

  totalRefunded(overrides?: CallOverrides): Promise<BigNumber>;

  totalVolumePurchased(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tvl(overrides?: CallOverrides): Promise<BigNumber>;

  useWhitelisting(overrides?: CallOverrides): Promise<boolean>;

  userAvailableClaim(
    _userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawContribution(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawLeftovers(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawLiquidity(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MINIMUM_LOCK_DAYS(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<number>;

    cancel(overrides?: CallOverrides): Promise<void>;

    changeTierDates(
      _endTime1: PromiseOrValue<BigNumberish>,
      _publicStartTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeWhitelist(
      _whitelist: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    claim(overrides?: CallOverrides): Promise<void>;

    claimedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contribute(
      _funds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    contributionOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cycle(overrides?: CallOverrides): Promise<BigNumber>;

    cycleBps(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdrawContribution(overrides?: CallOverrides): Promise<boolean>;

    emergencyWithdrawFees(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdrawToken(
      payaddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    finalize(
      _token: PromiseOrValue<string>,
      _totalSupply: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getPaymentTokenDecimals(overrides?: CallOverrides): Promise<number>;

    getPoolInfo(
      overrides?: CallOverrides
    ): Promise<[string, number[], BigNumber[], string, string]>;

    governance(overrides?: CallOverrides): Promise<string>;

    hardCap(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      presale: LibPresale.PresaleStruct,
      _linkAddress: [PromiseOrValue<string>, PromiseOrValue<string>],
      _version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    max_payment(overrides?: CallOverrides): Promise<BigNumber>;

    min_payment(overrides?: CallOverrides): Promise<BigNumber>;

    nftAddress(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    payment_currency(overrides?: CallOverrides): Promise<string>;

    poolState(overrides?: CallOverrides): Promise<number>;

    poolType(overrides?: CallOverrides): Promise<number>;

    publicStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    purchasedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rate(overrides?: CallOverrides): Promise<BigNumber>;

    refundedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setGovernance(
      governance_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRate(
      _rate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    softCap(overrides?: CallOverrides): Promise<BigNumber>;

    startPublicSaleNow(overrides?: CallOverrides): Promise<void>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    tgeBps(overrides?: CallOverrides): Promise<BigNumber>;

    tgeDate(overrides?: CallOverrides): Promise<BigNumber>;

    tier1(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { startTime: BigNumber; endTime: BigNumber }
    >;

    token(overrides?: CallOverrides): Promise<string>;

    totalClaimed(overrides?: CallOverrides): Promise<BigNumber>;

    totalRaised(overrides?: CallOverrides): Promise<BigNumber>;

    totalRefunded(overrides?: CallOverrides): Promise<BigNumber>;

    totalVolumePurchased(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    tvl(overrides?: CallOverrides): Promise<BigNumber>;

    useWhitelisting(overrides?: CallOverrides): Promise<boolean>;

    userAvailableClaim(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawContribution(overrides?: CallOverrides): Promise<void>;

    withdrawLeftovers(overrides?: CallOverrides): Promise<void>;

    withdrawLiquidity(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Cancelled(address,uint256)"(
      pool_address?: PromiseOrValue<string> | null,
      timestamp?: null
    ): CancelledEventFilter;
    Cancelled(
      pool_address?: PromiseOrValue<string> | null,
      timestamp?: null
    ): CancelledEventFilter;

    "Claimed(address,uint256,uint256,address)"(
      pool_address?: PromiseOrValue<string> | null,
      total_claimed?: null,
      pending_claim?: null,
      user_address?: null
    ): ClaimedEventFilter;
    Claimed(
      pool_address?: PromiseOrValue<string> | null,
      total_claimed?: null,
      pending_claim?: null,
      user_address?: null
    ): ClaimedEventFilter;

    "Contributed(address,uint256,address,uint256)"(
      pool_address?: PromiseOrValue<string> | null,
      value?: null,
      user?: null,
      totalRaised?: null
    ): ContributedEventFilter;
    Contributed(
      pool_address?: PromiseOrValue<string> | null,
      value?: null,
      user?: null,
      totalRaised?: null
    ): ContributedEventFilter;

    "ContributionWithdrawn(address,uint256,uint256,address)"(
      pool_address?: PromiseOrValue<string> | null,
      amount?: null,
      fees?: null,
      user?: null
    ): ContributionWithdrawnEventFilter;
    ContributionWithdrawn(
      pool_address?: PromiseOrValue<string> | null,
      amount?: null,
      fees?: null,
      user?: null
    ): ContributionWithdrawnEventFilter;

    "EmergencyLiquidityWithdrawn(address,address,uint256,address)"(
      pool_address?: PromiseOrValue<string> | null,
      user?: null,
      amount?: null,
      pair?: null
    ): EmergencyLiquidityWithdrawnEventFilter;
    EmergencyLiquidityWithdrawn(
      pool_address?: PromiseOrValue<string> | null,
      user?: null,
      amount?: null,
      pair?: null
    ): EmergencyLiquidityWithdrawnEventFilter;

    "EmergencyWithdrawn(address,address,uint256,address)"(
      pool_address?: PromiseOrValue<string> | null,
      user?: null,
      amount?: null,
      pair?: null
    ): EmergencyWithdrawnEventFilter;
    EmergencyWithdrawn(
      pool_address?: PromiseOrValue<string> | null,
      user?: null,
      amount?: null,
      pair?: null
    ): EmergencyWithdrawnEventFilter;

    "Finalized(address,address,address,uint256,uint256)"(
      pool_address?: PromiseOrValue<string> | null,
      user?: null,
      token?: null,
      token_supply?: null,
      total_raised?: null
    ): FinalizedEventFilter;
    Finalized(
      pool_address?: PromiseOrValue<string> | null,
      user?: null,
      token?: null,
      token_supply?: null,
      total_raised?: null
    ): FinalizedEventFilter;

    "GovernanceChanged(address,address,address)"(
      pool_address?: PromiseOrValue<string> | null,
      _old?: null,
      _new?: null
    ): GovernanceChangedEventFilter;
    GovernanceChanged(
      pool_address?: PromiseOrValue<string> | null,
      _old?: null,
      _new?: null
    ): GovernanceChangedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "LiquidityWithdrawn(address,address,uint256,address)"(
      pool_address?: PromiseOrValue<string> | null,
      user?: null,
      amount?: null,
      payment_currency?: null
    ): LiquidityWithdrawnEventFilter;
    LiquidityWithdrawn(
      pool_address?: PromiseOrValue<string> | null,
      user?: null,
      amount?: null,
      payment_currency?: null
    ): LiquidityWithdrawnEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PoolPublicStartAtChanged(uint256,uint256)"(
      timestamp?: null,
      start_at?: null
    ): PoolPublicStartAtChangedEventFilter;
    PoolPublicStartAtChanged(
      timestamp?: null,
      start_at?: null
    ): PoolPublicStartAtChangedEventFilter;

    "PoolTierChanged(uint256,uint256,uint256)"(
      timestamp?: null,
      _endTime1?: null,
      _publicStartTime?: null
    ): PoolTierChangedEventFilter;
    PoolTierChanged(
      timestamp?: null,
      _endTime1?: null,
      _publicStartTime?: null
    ): PoolTierChangedEventFilter;

    "RateChanged(address,uint256,uint256)"(
      pool_address?: PromiseOrValue<string> | null,
      _old_rate?: null,
      _new_rate?: null
    ): RateChangedEventFilter;
    RateChanged(
      pool_address?: PromiseOrValue<string> | null,
      _old_rate?: null,
      _new_rate?: null
    ): RateChangedEventFilter;

    "WhitelistChanged(bool)"(_whitelist?: null): WhitelistChangedEventFilter;
    WhitelistChanged(_whitelist?: null): WhitelistChangedEventFilter;
  };

  estimateGas: {
    MINIMUM_LOCK_DAYS(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    cancel(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeTierDates(
      _endTime1: PromiseOrValue<BigNumberish>,
      _publicStartTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeWhitelist(
      _whitelist: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contribute(
      _funds: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    contributionOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cycle(overrides?: CallOverrides): Promise<BigNumber>;

    cycleBps(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdrawContribution(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emergencyWithdrawFees(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdrawToken(
      payaddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    finalize(
      _token: PromiseOrValue<string>,
      _totalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPaymentTokenDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolInfo(overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    hardCap(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      presale: LibPresale.PresaleStruct,
      _linkAddress: [PromiseOrValue<string>, PromiseOrValue<string>],
      _version: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    max_payment(overrides?: CallOverrides): Promise<BigNumber>;

    min_payment(overrides?: CallOverrides): Promise<BigNumber>;

    nftAddress(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    payment_currency(overrides?: CallOverrides): Promise<BigNumber>;

    poolState(overrides?: CallOverrides): Promise<BigNumber>;

    poolType(overrides?: CallOverrides): Promise<BigNumber>;

    publicStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    purchasedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rate(overrides?: CallOverrides): Promise<BigNumber>;

    refundedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGovernance(
      governance_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRate(
      _rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    softCap(overrides?: CallOverrides): Promise<BigNumber>;

    startPublicSaleNow(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    tgeBps(overrides?: CallOverrides): Promise<BigNumber>;

    tgeDate(overrides?: CallOverrides): Promise<BigNumber>;

    tier1(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    totalClaimed(overrides?: CallOverrides): Promise<BigNumber>;

    totalRaised(overrides?: CallOverrides): Promise<BigNumber>;

    totalRefunded(overrides?: CallOverrides): Promise<BigNumber>;

    totalVolumePurchased(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tvl(overrides?: CallOverrides): Promise<BigNumber>;

    useWhitelisting(overrides?: CallOverrides): Promise<BigNumber>;

    userAvailableClaim(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawContribution(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawLeftovers(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawLiquidity(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MINIMUM_LOCK_DAYS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancel(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeTierDates(
      _endTime1: PromiseOrValue<BigNumberish>,
      _publicStartTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeWhitelist(
      _whitelist: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contribute(
      _funds: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    contributionOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cycle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cycleBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyWithdrawContribution(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdrawFees(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyWithdrawToken(
      payaddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    endTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalize(
      _token: PromiseOrValue<string>,
      _totalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPaymentTokenDecimals(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hardCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      presale: LibPresale.PresaleStruct,
      _linkAddress: [PromiseOrValue<string>, PromiseOrValue<string>],
      _version: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    max_payment(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    min_payment(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payment_currency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publicStartTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchasedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refundedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGovernance(
      governance_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRate(
      _rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    softCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startPublicSaleNow(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tgeBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tgeDate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tier1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalClaimed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalRaised(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalRefunded(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalVolumePurchased(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tvl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    useWhitelisting(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userAvailableClaim(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawContribution(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawLeftovers(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawLiquidity(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
