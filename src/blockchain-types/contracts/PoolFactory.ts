/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace LibTier {
  export type TierStruct = {
    startTime: PromiseOrValue<BigNumberish>;
    endTime: PromiseOrValue<BigNumberish>;
  };

  export type TierStructOutput = [BigNumber, BigNumber] & {
    startTime: BigNumber;
    endTime: BigNumber;
  };
}

export declare namespace LibPresale {
  export type PresaleStruct = {
    governance: PromiseOrValue<string>;
    salt: PromiseOrValue<BigNumberish>;
    emergencyWithdrawFees: PromiseOrValue<BigNumberish>;
    nftAddress: PromiseOrValue<string>;
    payment_currency: PromiseOrValue<string>;
    rate: PromiseOrValue<BigNumberish>;
    min_payment: PromiseOrValue<BigNumberish>;
    max_payment: PromiseOrValue<BigNumberish>;
    softCap: PromiseOrValue<BigNumberish>;
    hardCap: PromiseOrValue<BigNumberish>;
    startTime: PromiseOrValue<BigNumberish>;
    endTime: PromiseOrValue<BigNumberish>;
    tgeBps: PromiseOrValue<BigNumberish>;
    cycle: PromiseOrValue<BigNumberish>;
    cycleBps: PromiseOrValue<BigNumberish>;
    useWhitelist: PromiseOrValue<boolean>;
    publicStartTime: PromiseOrValue<BigNumberish>;
    tier1: LibTier.TierStruct;
  };

  export type PresaleStructOutput = [
    string,
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    LibTier.TierStructOutput
  ] & {
    governance: string;
    salt: BigNumber;
    emergencyWithdrawFees: BigNumber;
    nftAddress: string;
    payment_currency: string;
    rate: BigNumber;
    min_payment: BigNumber;
    max_payment: BigNumber;
    softCap: BigNumber;
    hardCap: BigNumber;
    startTime: BigNumber;
    endTime: BigNumber;
    tgeBps: BigNumber;
    cycle: BigNumber;
    cycleBps: BigNumber;
    useWhitelist: boolean;
    publicStartTime: BigNumber;
    tier1: LibTier.TierStructOutput;
  };
}

export interface PoolFactoryInterface extends utils.Interface {
  functions: {
    "adminWallet()": FunctionFragment;
    "bnbLiquidity(address,uint256)": FunctionFragment;
    "createSale((address,uint256,uint256,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,uint256,(uint256,uint256)))": FunctionFragment;
    "getPaymentCurrency(address)": FunctionFragment;
    "initialize(address,uint8)": FunctionFragment;
    "master()": FunctionFragment;
    "owner()": FunctionFragment;
    "paymentCurrencies(address)": FunctionFragment;
    "poolEmergencyWithdrawToken(address,address,address,uint256)": FunctionFragment;
    "poolOwner()": FunctionFragment;
    "poolSetGovernance(address,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAdminWallet(address)": FunctionFragment;
    "setMasterAddress(address)": FunctionFragment;
    "setPaymentCurrency(address,bool)": FunctionFragment;
    "setPoolOwner(address)": FunctionFragment;
    "setVersion(uint8)": FunctionFragment;
    "transferAnyERC20Token(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "adminWallet"
      | "bnbLiquidity"
      | "createSale"
      | "getPaymentCurrency"
      | "initialize"
      | "master"
      | "owner"
      | "paymentCurrencies"
      | "poolEmergencyWithdrawToken"
      | "poolOwner"
      | "poolSetGovernance"
      | "renounceOwnership"
      | "setAdminWallet"
      | "setMasterAddress"
      | "setPaymentCurrency"
      | "setPoolOwner"
      | "setVersion"
      | "transferAnyERC20Token"
      | "transferOwnership"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "adminWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bnbLiquidity",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createSale",
    values: [LibPresale.PresaleStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaymentCurrency",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "master", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymentCurrencies",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "poolEmergencyWithdrawToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "poolOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolSetGovernance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAdminWallet",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMasterAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentCurrency",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVersion",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAnyERC20Token",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "adminWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bnbLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "master", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentCurrencies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolEmergencyWithdrawToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolSetGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAdminWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMasterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setVersion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferAnyERC20Token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "GovernanceChanged(address,address,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PoolFeesUpdated(string,uint256,uint256)": EventFragment;
    "PresalePoolCreated(address,tuple)": EventFragment;
    "VersionChanged(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GovernanceChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolFeesUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PresalePoolCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VersionChanged"): EventFragment;
}

export interface GovernanceChangedEventObject {
  pool_address: string;
  _old: string;
  _new: string;
}
export type GovernanceChangedEvent = TypedEvent<
  [string, string, string],
  GovernanceChangedEventObject
>;

export type GovernanceChangedEventFilter =
  TypedEventFilter<GovernanceChangedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PoolFeesUpdatedEventObject {
  _feeType: string;
  _newFees: BigNumber;
  _oldFees: BigNumber;
}
export type PoolFeesUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  PoolFeesUpdatedEventObject
>;

export type PoolFeesUpdatedEventFilter = TypedEventFilter<PoolFeesUpdatedEvent>;

export interface PresalePoolCreatedEventObject {
  pool_address: string;
  presale: LibPresale.PresaleStructOutput;
}
export type PresalePoolCreatedEvent = TypedEvent<
  [string, LibPresale.PresaleStructOutput],
  PresalePoolCreatedEventObject
>;

export type PresalePoolCreatedEventFilter =
  TypedEventFilter<PresalePoolCreatedEvent>;

export interface VersionChangedEventObject {
  _newVersion: BigNumber;
  _oldVersion: BigNumber;
}
export type VersionChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  VersionChangedEventObject
>;

export type VersionChangedEventFilter = TypedEventFilter<VersionChangedEvent>;

export interface PoolFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoolFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    adminWallet(overrides?: CallOverrides): Promise<[string]>;

    bnbLiquidity(
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createSale(
      presale: LibPresale.PresaleStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPaymentCurrency(
      index: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _master: PromiseOrValue<string>,
      _version: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    master(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paymentCurrencies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    poolEmergencyWithdrawToken(
      poolAddress: PromiseOrValue<string>,
      payaddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    poolOwner(overrides?: CallOverrides): Promise<[string]>;

    poolSetGovernance(
      poolAddress: PromiseOrValue<string>,
      _governance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAdminWallet(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMasterAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPaymentCurrency(
      index: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPoolOwner(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVersion(
      _version: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferAnyERC20Token(
      payaddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[number]>;
  };

  adminWallet(overrides?: CallOverrides): Promise<string>;

  bnbLiquidity(
    _receiver: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createSale(
    presale: LibPresale.PresaleStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPaymentCurrency(
    index: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _master: PromiseOrValue<string>,
    _version: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  master(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  paymentCurrencies(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  poolEmergencyWithdrawToken(
    poolAddress: PromiseOrValue<string>,
    payaddress: PromiseOrValue<string>,
    tokenAddress: PromiseOrValue<string>,
    tokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  poolOwner(overrides?: CallOverrides): Promise<string>;

  poolSetGovernance(
    poolAddress: PromiseOrValue<string>,
    _governance: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAdminWallet(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMasterAddress(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPaymentCurrency(
    index: PromiseOrValue<string>,
    status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPoolOwner(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVersion(
    _version: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferAnyERC20Token(
    payaddress: PromiseOrValue<string>,
    tokenAddress: PromiseOrValue<string>,
    tokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    adminWallet(overrides?: CallOverrides): Promise<string>;

    bnbLiquidity(
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createSale(
      presale: LibPresale.PresaleStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getPaymentCurrency(
      index: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _master: PromiseOrValue<string>,
      _version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    master(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    paymentCurrencies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    poolEmergencyWithdrawToken(
      poolAddress: PromiseOrValue<string>,
      payaddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    poolOwner(overrides?: CallOverrides): Promise<string>;

    poolSetGovernance(
      poolAddress: PromiseOrValue<string>,
      _governance: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAdminWallet(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMasterAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPaymentCurrency(
      index: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolOwner(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVersion(
      _version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferAnyERC20Token(
      payaddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<number>;
  };

  filters: {
    "GovernanceChanged(address,address,address)"(
      pool_address?: PromiseOrValue<string> | null,
      _old?: null,
      _new?: null
    ): GovernanceChangedEventFilter;
    GovernanceChanged(
      pool_address?: PromiseOrValue<string> | null,
      _old?: null,
      _new?: null
    ): GovernanceChangedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PoolFeesUpdated(string,uint256,uint256)"(
      _feeType?: null,
      _newFees?: null,
      _oldFees?: null
    ): PoolFeesUpdatedEventFilter;
    PoolFeesUpdated(
      _feeType?: null,
      _newFees?: null,
      _oldFees?: null
    ): PoolFeesUpdatedEventFilter;

    "PresalePoolCreated(address,tuple)"(
      pool_address?: PromiseOrValue<string> | null,
      presale?: null
    ): PresalePoolCreatedEventFilter;
    PresalePoolCreated(
      pool_address?: PromiseOrValue<string> | null,
      presale?: null
    ): PresalePoolCreatedEventFilter;

    "VersionChanged(uint256,uint256)"(
      _newVersion?: null,
      _oldVersion?: null
    ): VersionChangedEventFilter;
    VersionChanged(
      _newVersion?: null,
      _oldVersion?: null
    ): VersionChangedEventFilter;
  };

  estimateGas: {
    adminWallet(overrides?: CallOverrides): Promise<BigNumber>;

    bnbLiquidity(
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createSale(
      presale: LibPresale.PresaleStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPaymentCurrency(
      index: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _master: PromiseOrValue<string>,
      _version: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    master(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paymentCurrencies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolEmergencyWithdrawToken(
      poolAddress: PromiseOrValue<string>,
      payaddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    poolOwner(overrides?: CallOverrides): Promise<BigNumber>;

    poolSetGovernance(
      poolAddress: PromiseOrValue<string>,
      _governance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAdminWallet(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMasterAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPaymentCurrency(
      index: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPoolOwner(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVersion(
      _version: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferAnyERC20Token(
      payaddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    adminWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bnbLiquidity(
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createSale(
      presale: LibPresale.PresaleStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPaymentCurrency(
      index: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _master: PromiseOrValue<string>,
      _version: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    master(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paymentCurrencies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolEmergencyWithdrawToken(
      poolAddress: PromiseOrValue<string>,
      payaddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    poolOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolSetGovernance(
      poolAddress: PromiseOrValue<string>,
      _governance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAdminWallet(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMasterAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPaymentCurrency(
      index: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPoolOwner(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVersion(
      _version: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferAnyERC20Token(
      payaddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
